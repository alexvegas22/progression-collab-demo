image: docker/compose:1.29.2

services:
  - docker:20.10.16-dind

default:
  tags: [docker]

stages:
  - verifications 
  - build_image
  - tag_image
  - test
  - deploy_image

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  PROGRESSION_DIR: $CI_PROJECT_DIR
  DOCKER_TLS_CERTDIR: ""
  BRANCHE: $CI_COMMIT_REF_NAME
  
.preparer_contexte: &preparer_contexte
    - apk add ca-certificates openssh
    - mkdir ~/.ssh && cp $ID_RSA ~/.ssh/id_rsa && chmod 400 ~/.ssh/id_rsa
    - echo -e "Host *\n  StrictHostKeyChecking no" > ~/.ssh/config
    - docker context create --docker host=ssh://$CD_USER@$CD_HOST:$CD_PORT --description="Production" prod
    - docker context use prod
    - DOCKER_HOST= 

.login: &login
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    
# Stage test

# Tests unitaires
test_unitaires:
  stage: test
  needs:
    - job: const_image
      optional: true
  script:
    - TAG_DEPLOY=$BRANCHE docker-compose run tests_webapp
  except:
    - master
    - dev
  # Désactivé tant qu'il n'existe pas de tests utiles
  when: manual
    
# Linter    
linter:
  stage: test
  needs:
    - job: const_image
      optional: true
  script:
    - TAG_DEPLOY=$BRANCHE docker-compose run linter
  except:
    - master
    - dev

# Stage version_check

# Vérification de l'incrément du numéro de version
version_check:
  stage: verifications
  script:
    - docker run -v $PWD:/progression_frontend bitnami/git bash -c 'git config --global --add safe.directory /progression_frontend && cd /progression_frontend && VERSION_PREV=$(git show HEAD^:VERSION|cut -d "=" -f 2); VERSION_ACT=$(git show HEAD:VERSION|cut -d "=" -f 2); echo Version: $VERSION_PREV  → $VERSION_ACT; dpkg --compare-versions "$VERSION_ACT" "gt" "$VERSION_PREV" || ( echo ERREUR la version n’a pas avancé && exit 1 )'
  only:
  - master

# Stage build_image

# Construction de l'image
const_image:
  stage: build_image
  variables:
    DOCKER_BUILDKIT: 1
  before_script:
    - *login
  script:
    - \[\[ "$CI_COMMIT_REF_NAME" = "master" -o "$CI_COMMIT_REF_NAME" = "dev" \]\] && target="production-stage" || target="build-stage"
    - \[\[ "$CI_COMMIT_REF_NAME" = "master" -o "$CI_COMMIT_REF_NAME" = "dev" \]\] && mode="prod" || mode="dev"
    - docker build -f docker/Dockerfile --cache-from $CI_REGISTRY/$CI_PROJECT_PATH:$BRANCHE --build-arg BUILDKIT_INLINE_CACHE=1 --build-arg NODE_ENV=$mode --build-arg MODE=$mode --target $target -t $CI_REGISTRY/$CI_PROJECT_PATH:$BRANCHE .
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH:$BRANCHE

const_lti:
  stage: build_image
  variables:
    DOCKER_BUILDKIT: 1
  before_script:
    - *login
  script:
    - docker build -f ltijs/Dockerfile --cache-from $CI_REGISTRY/$CI_PROJECT_PATH:lti_latest --build-arg BUILDKIT_INLINE_CACHE=1 -t $CI_REGISTRY/$CI_PROJECT_PATH:lti_latest ltijs
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH:lti_latest
  only:
  - master


# Stage tag

tag_latest:
  stage: tag_image
  needs: [const_image]
  before_script:
    - *login
  script:
    - docker pull $CI_REGISTRY/$CI_PROJECT_PATH:$BRANCHE
    - docker tag $CI_REGISTRY/$CI_PROJECT_PATH:$BRANCHE $CI_REGISTRY/$CI_PROJECT_PATH:latest   
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH:latest
  only:
    - master

  
# Stage deploy_image

# Déploiement sur /prod
deploy_prod:
  stage: deploy_image
  needs: [tag_latest]
  environment:
    name: prod
    url: https://progression.dti.crosemont.quebec/
    on_stop: stop_prod
  before_script:
    - *preparer_contexte
    - *login
  script:
    - TAG_DEPLOY=latest docker-compose pull webapp
    - TAG_DEPLOY=latest docker-compose -p prod up --force-recreate -d webapp ltijs
  only:
    - master
  when:
    manual
    
stop_prod:
  stage: deploy_image
  environment:
    name: prod
    action: stop
  script:
    - docker-compose -p prod stop webapp ltijs
  when:
    manual

# Déploiement sur progression.crosemont.qc.ca
deploy_crosemont:
  stage: deploy_image
  needs: [tag_latest]
  tags:
    - docker
    - crosemont
  environment:
    name: crosemont
    url: https://progression.crosemont.qc.ca/
    on_stop: stop_crosemont
  before_script:
    - export CD_HOST=progression.crosemont.qc.ca CD_PORT=22 CD_USER=updater
    - *preparer_contexte
    - *login
  script:
    - TAG_DEPLOY=latest docker-compose pull webapp ltijs
    - TAG_DEPLOY=latest docker-compose -p prod up --force-recreate -d webapp ltijs
  only:
    - master
  when:
    manual
    
stop_crosemont:
  stage: deploy_image
  environment:
    name: crosemont
    action: stop
  script:
    - docker-compose -p prod stop webapp ltijs
  when:
    manual
    
# Déploiement sur /staging
deploy_staging:
  stage: deploy_image
  needs: [tag_latest]
  environment:
    name: staging
    url: $URL_STAGING
    on_stop: stop_staging
  before_script:
    - *preparer_contexte
    - *login
  script:
    - TAG_DEPLOY=latest docker-compose pull webapp ltijs
    - TAG_DEPLOY=latest docker-compose -p staging up --force-recreate -d webapp ltijs
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $CI_REGISTRY == "git.dti.crosemont.quebec:5050"'
    
stop_staging:
  stage: deploy_image
  environment:
    name: staging
    action: stop
  script:
    - docker-compose -p staging stop webapp ltijs
  only:
    - master
  when:
    manual

# Déploiement sur /demo
deploy_demo:
  stage: deploy_image
  needs: [tag_latest]
  environment:
    name: demo
    url: $URL_demo
    on_stop: stop_demo
  before_script:
    - *preparer_contexte
    - *login
  script:
    - TAG_DEPLOY=latest docker-compose pull webapp
    - TAG_DEPLOY=latest docker-compose -p demo up --force-recreate -d webapp
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $CI_REGISTRY == "git.dti.crosemont.quebec:5050"'

stop_demo:
  stage: deploy_image
  environment:
    name: demo
    action: stop
  script:
    - docker-compose -p demo stop webapp
  only:
    - master
  when:
    manual
    
# Déploiement sur /dev
deploy_dev:
  stage: deploy_image
  environment:
    name: dev
    url: $URL_DEV
    on_stop: stop_dev
  before_script:
    - *preparer_contexte
    - *login
  script:
    - TAG_DEPLOY=dev docker-compose pull webapp
    - TAG_DEPLOY=dev docker-compose -p dev up --force-recreate -d webapp
  only:
    - dev

stop_dev:
  stage: deploy_image
  environment:
    name: dev    
    action: stop
  script:
    - docker-compose -p dev stop webapp
  only:
    - dev
  when:
    manual
    
